<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.13">
  <actions/>
  <description>This job will launch a utilities docker image with specified tag and it will based on the input parameter to make utilities to do the configuration when startup. Th
&#xd;
Before your begin:&#xd;
1. Customize your utility docker image:&#xd;
    1.1. install a Git client and ensure the Git commands are in the system or user path.&#xd;
    1.2. install SSH client. Use the ssh protocol to communicate with Git. Other protocols, such as https, are not supported.&#xd;
    1.3. make sure ssh keys files are ready in your custom utility docker image. You could put the key files in the custom utility docker for testing purpose. Or holds the key fil
    1.4. install maven and make sure maven commands are in the system or user path.&#xd;
Note: configGit.sh can be customized to install SSH/Git and git clone the repository. Comments out the code in configGit in OOTB utility docker driver.&#xd;
        &#xd;
2. If you want to build ts-app, search-app, cos-app or xc-app, should configure the modules to be package in property file build-buildtype-apptype.properties&#xd;
&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Tenant</name>
          <description></description>
          <defaultValue>demo</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EnvName</name>
          <description></description>
          <defaultValue>qa</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EnvType</name>
          <description></description>
          <defaultValue>auth</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>UtilitiesDockerTag</name>
          <description>Tag for Utilities Docker. The default docker repository is ${dockerRepoHost}/commerce/ts-utils</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>AppType</name>
          <description>target app type to build</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string></string>
              <string>ts</string>
              <string>crs</string>
              <string>search</string>
              <string>xc</string>
              <string>data</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BuildType</name>
          <description>target build type which decides where to extract the source code</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string></string>
              <string>local</string>
              <string>svn</string>
              <string>cvs</string>
              <string>git</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BuildLabel</name>
          <description>The label of this build package.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GitName</name>
          <description>The git name that holds the customization source code. e.g. CustomCode.git, the GitName is CustomCode</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RepositoryURL</name>
          <description>The repository url where holds the customization source code. e.g. git@com.mycompany:CustomCode.git</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ConfigurationURL</name>
          <description>The url where holds the wcb configuration files or customized wcb files. This url points to a zip file, and the files in the zip are organized same as the file structure of wcbd. e.g. wcbd/setenv</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NexusURL</name>
          <description>The Nexus URL. The WCB package built by this job will be pushed to NexusURL/TenantName/AppType-app/BuildLable/. e.g. set the NexusURL to be http://mynexus.com:8081/nexus/content/repositories/releases/commerce, TenentName is demo, AppType is data, BuildLable is 20181105, the WCB package will be push to http://mynexus.com:8081/nexus/content/repositories/releases/commerce/demo/data-app/20181105/ </description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.36.1">
    <script>def label = &quot;run-utility_job-${UUID.randomUUID().toString()}&quot;
podTemplate(label: label,  containers: [
     containerTemplate(
            name: &apos;utility&apos;,
            image: &quot;${dockerRepoHost}/commerce/ts-utils:${UtilitiesDockerTag}&quot;,
            ttyEnabled: true,
            privileged: true,
            command: &apos;cat&apos;,
            alwaysPullImage: true,
            envVars: [
                containerEnvVar(key: &apos;VAULT_TOKEN&apos;, value: &quot;${vault_token}&quot;),
                containerEnvVar(key: &apos;VAULT_URL&apos;, value: &quot;${vault_url}/v1&quot;),
                containerEnvVar(key: &apos;TENANT&apos;, value: &quot;${Tenant}&quot;),
                containerEnvVar(key: &apos;ENVIRONMENT&apos;, value: &quot;${EnvName}&quot;),
                containerEnvVar(key: &apos;ENVTYPE&apos;, value: &quot;${EnvType}&quot;),
                containerEnvVar(key: &apos;APPTYPE&apos;, value: &quot;${AppType}&quot;),
                containerEnvVar(key: &apos;BUILDTYPE&apos;, value: &quot;${BuildType}&quot;),
                containerEnvVar(key: &apos;GITNAME&apos;, value: &quot;${GitName}&quot;),
                containerEnvVar(key: &apos;CONFIG_WCB&apos;, value: &apos;true&apos;),
                containerEnvVar(key: &apos;REPOSITORY_URL&apos;, value: &quot;${RepositoryURL}&quot;),
                containerEnvVar(key: &apos;STOREWEB_HOST&apos;, value: &quot;Null&quot;),
                containerEnvVar(key: &apos;CONFIGURE_MODE&apos;, value: &apos;Vault&apos;),
                containerEnvVar(key: &apos;LICENSE&apos;, value: &apos;accept&apos;),
                containerEnvVar(key: &apos;QUICKRUN&apos;, value: &apos;true&apos;)
            ]
        ),
    containerTemplate(
            name: &apos;jnlp&apos;,
            image: &quot;${dockerRepoHost}/commerce/jnlp-slave:latest&quot;,
            args: &apos;${computer.jnlpmac} ${computer.name}&apos;,
            command: &apos;&apos;

        )
  ]
  ) 
{
    node (label) {
        container(&apos;utility&apos;) {
            stage(&apos;Compiling and Packaging&apos;) {
                sh(&quot;/SETUP/bin/entrypoint.sh&quot;)
                sh(&quot;python /SETUP/scripts/downloadWCBDConfig.py -pu &apos;$ConfigurationURL&apos;&quot;)
                sh(&quot;/opt/WebSphere/CommerceServer90/wcbd/wcbd-ant -buildfile &apos;/opt/WebSphere/CommerceServer90/wcbd/wcbd-build.xml&apos; -Dapp.type=$AppType -Dbuild.type=$BuildType -Dbuild.label=$BuildLabel&quot;)
                sh(&quot;/opt/WebSphere/CommerceServer90/bin/uploadFile.sh -url $NexusURL -file wcbd-deploy-server-${BuildType}-${AppType}-${BuildLabel}.zip -apptype ${AppType}-app -tenant ${Tenant} -version=${BuildLabel}&quot;)
                
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
